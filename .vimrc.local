" =============================================================================
" General settings
" =============================================================================
set showtabline=2
set scrolloff=8
set termguicolors
set guifont=Monaco:h24
set clipboard=unnamed
set showmode

" =============================================================================
" Color scheme settings
" =============================================================================
let g:airline_theme='papercolor'
let g:airline_powerline_fonts=1

" =============================================================================
" Git commit settings
" =============================================================================
autocmd Filetype gitcommit setlocal spell textwidth=72

" =============================================================================
" NERDTree settings
" =============================================================================
let NERDTreeShowHidden=1
map <leader>n :NERDTreeToggle<CR>
let g:NERDTreeNodeDelimiter = "\u00a0"
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDSpaceDelims = 1

" =============================================================================
" Tab management settings
" =============================================================================
nnoremap tn :tabnew<CR>
nnoremap tc :tabclose<CR>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>

" =============================================================================
" Visual mode remappings
" =============================================================================
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
vnoremap p :<C-u>execute "normal '[V']_dP"<CR>

" =============================================================================
" Search and replace settings
" =============================================================================
nnoremap <leader>s :%s/\<<C-r><C-w>\>/<C-r><C-w>/gcI<Left><Left><Left><Left>

" =============================================================================
" vim-test settings
" =============================================================================
let test#rust#cargotest#options = '-- --nocapture'

" =============================================================================
" Emmet settings
" =============================================================================
let g:user_emmet_leader_key='<leader>,'

" =============================================================================
" Save file settings
" =============================================================================
nnoremap <Leader>w :w<CR>

" =============================================================================
" Pasting settings
" =============================================================================
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" =============================================================================
" Functions
" =============================================================================
function! ListKeymaps()
  let modes = ['n', 'v', 'x', 's', 'o', 'i', 'l', 'c', 't']
  let mode_names = {
        \ 'n': 'Normal',
        \ 'v': 'Visual',
        \ 'x': 'Select',
        \ 's': 'Select',
        \ 'o': 'Operator-pending',
        \ 'i': 'Insert',
        \ 'l': 'Insert',
        \ 'c': 'Command-line',
        \ 't': 'Terminal-Job',
        \ }
  let keymaps = []
  for mode in modes
    let mode_keymaps = execute(mode . 'map')
    let mode_lines = split(mode_keymaps, '\n')
    for line in mode_lines
      if !empty(line)
        call add(keymaps, mode_names[mode] . ' ' . line)
      endif
    endfor
  endfor
  return keymaps
endfunction

function! FZFKeymaps()
  let keymaps = ListKeymaps()
  call fzf#run({
        \ 'source':  keymaps,
        \ 'sink':    'echo',
        \ 'options': '+m --ansi --prompt "Keymaps> "'
        \ })
endfunction

command! FZFKeymaps call FZFKeymaps()
command! CopyKeymaps let @+ = join(ListKeymaps(), "\n")

" =============================================================================
" Neovim settings
" =============================================================================
if has('nvim') && filereadable(expand("~/dotfiles-local/nvim-settings.lua"))
  source ~/dotfiles-local/nvim/settings.lua
endif

