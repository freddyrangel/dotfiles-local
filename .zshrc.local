# Terminal setup
# ---------------------
export TERM=xterm-256color
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME="norm"
source $ZSH/oh-my-zsh.sh

# Vim alias
# --------
if type nvim > /dev/null 2>&1; then
  alias vim='nvim'
fi

# Go & GVM setup
# --------
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
export GOPATH=$HOME/repositories/golang_packages

# Cargo setup
# ----------
export PATH="$HOME/.cargo/bin:$PATH"

# RVM setup
# --------
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

# NVM setup
# --------
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Flutter setup
# --------
export PATH="$PATH:$HOME/flutter/bin" ##temp until better flutter install

# Ctags alias
# -----------
alias ctags="`brew --prefix`/bin/ctags"

# Rust environment
# ----------------
# rustup
#
# avoid https://github.com/rust-analyzer/rust-analyzer/issues/4172
#
# NOTE: Has to be defined after PATH update to locate .cargo directory.
#
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"

# configure rust environment
#
# - autocomplete
# - rust-analyzer
# - cargo audit
# - cargo-nextest
# - cargo fmt
# - cargo clippy
# - cargo edit
#
source $HOME/.cargo/env
if [ ! -f "$HOME/.config/rustlang/autocomplete/rustup" ]; then
  mkdir -p ~/.config/rustlang/autocomplete
  rustup completions bash rustup >> ~/.config/rustlang/autocomplete/rustup
fi
source "$HOME/.config/rustlang/autocomplete/rustup"
if ! command -v rust-analyzer &> /dev/null
then
  brew install rust-analyzer
fi
if ! cargo audit --version &> /dev/null; then
  cargo install cargo-audit --features=fix
fi
if ! cargo nextest --version &> /dev/null; then
  cargo install cargo-nextest
fi
if ! cargo fmt --version &> /dev/null; then
  rustup component add rustfmt
fi
if ! cargo clippy --version &> /dev/null; then
  rustup component add clippy
fi
if ! ls ~/.cargo/bin | grep 'cargo-upgrade' &> /dev/null; then
  cargo install cargo-edit
fi

# Python environment (Pyenv)
# --------------------------
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# Quality of life: Tmux and Tmuxinator
# -----------------------------------
export TMUXINATOR_CONFIG=$HOME/dotfiles-local/tmuxinator
alias tma='tmux_attach_or_tmuxinator'
function tmux_attach_or_tmuxinator() {
  if [ $# -eq 0 ]; then
    echo "Usage: tma <session_name>"
    return 1
  fi

  local session_name="$1"
  if tmux has-session -t "$session_name" 2>/dev/null; then
    tmux attach-session -t "$session_name"
  else
    if command -v tmuxinator &> /dev/null; then
      tmuxinator start "$session_name" || tmux new-session -s "$session_name"
    else
      echo "tmuxinator not found. Creating a new regular tmux session."
      tmux new-session -s "$session_name"
    fi
  fi
}
